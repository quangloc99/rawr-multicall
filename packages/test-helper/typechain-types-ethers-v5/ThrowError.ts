/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface ThrowErrorInterface extends utils.Interface {
  functions: {
    "justRevert(string)": FunctionFragment;
    "revertCustom(uint256)": FunctionFragment;
    "revertError(string)": FunctionFragment;
    "revertPanic()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "justRevert"
      | "revertCustom"
      | "revertError"
      | "revertPanic"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "justRevert", values: [string]): string;
  encodeFunctionData(
    functionFragment: "revertCustom",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "revertError", values: [string]): string;
  encodeFunctionData(
    functionFragment: "revertPanic",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "justRevert", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revertCustom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revertError",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revertPanic",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ThrowError extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ThrowErrorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    justRevert(str: string, overrides?: CallOverrides): Promise<[void]>;

    revertCustom(x: BigNumberish, overrides?: CallOverrides): Promise<[void]>;

    revertError(str: string, overrides?: CallOverrides): Promise<[void]>;

    revertPanic(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  justRevert(str: string, overrides?: CallOverrides): Promise<void>;

  revertCustom(x: BigNumberish, overrides?: CallOverrides): Promise<void>;

  revertError(str: string, overrides?: CallOverrides): Promise<void>;

  revertPanic(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    justRevert(str: string, overrides?: CallOverrides): Promise<void>;

    revertCustom(x: BigNumberish, overrides?: CallOverrides): Promise<void>;

    revertError(str: string, overrides?: CallOverrides): Promise<void>;

    revertPanic(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    justRevert(str: string, overrides?: CallOverrides): Promise<BigNumber>;

    revertCustom(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revertError(str: string, overrides?: CallOverrides): Promise<BigNumber>;

    revertPanic(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    justRevert(
      str: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    revertCustom(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    revertError(
      str: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    revertPanic(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
