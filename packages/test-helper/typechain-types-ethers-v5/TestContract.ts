/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace TestContract {
  export type Vec2Struct = { x: BigNumberish; y: BigNumberish };

  export type Vec2StructOutput = [BigNumber, BigNumber] & {
    x: BigNumber;
    y: BigNumber;
  };
}

export interface TestContractInterface extends utils.Interface {
  functions: {
    "compare(int256,int256)": FunctionFragment;
    "hash(uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "swapXY((int256,int256))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "compare" | "hash" | "name" | "swapXY"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "compare",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "hash", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "swapXY",
    values: [TestContract.Vec2Struct]
  ): string;

  decodeFunctionResult(functionFragment: "compare", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hash", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swapXY", data: BytesLike): Result;

  events: {};
}

export interface TestContract extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TestContractInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    compare(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    hash(a: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    swapXY(
      v: TestContract.Vec2Struct,
      overrides?: CallOverrides
    ): Promise<[TestContract.Vec2StructOutput]>;
  };

  compare(
    a: BigNumberish,
    b: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  hash(a: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  swapXY(
    v: TestContract.Vec2Struct,
    overrides?: CallOverrides
  ): Promise<TestContract.Vec2StructOutput>;

  callStatic: {
    compare(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hash(a: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    swapXY(
      v: TestContract.Vec2Struct,
      overrides?: CallOverrides
    ): Promise<TestContract.Vec2StructOutput>;
  };

  filters: {};

  estimateGas: {
    compare(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hash(a: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    swapXY(
      v: TestContract.Vec2Struct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    compare(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hash(
      a: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swapXY(
      v: TestContract.Vec2Struct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
